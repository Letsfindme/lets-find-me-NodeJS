{"version":3,"sources":["../../src/controllers/feed.js"],"names":["fs","require","path","validationResult","Op","models","Sequelize","rewardPost","rewardComment","module","exports","getPosts","req","res","next","query","currentPage","pageSize","parseInt","offset","limit","Post","findAndCountAll","where","userId","user","id","include","model","Image","attributes","User","Avatar","order","count","posts","rows","length","status","json","message","console","log","addComment","errors","postId","params","isEmpty","error","Error","statusCode","findByPk","then","Avatars","update","credit","PostComment","create","text","body","imageRef","comment","err","addRate","rate","postRate","PostRate","findOne","post","starCount","createPost","location","JSON","parse","addressArray","address","split","Address","street","city","country","lat","coordinates","lang","lng","postcode","files","title","content","category","author","username","imageUrl","setAddress","map","file","image","setPost","getPost","getTopFeed","findAll","getTopSearchFeed","updatePost","creator","toString","clearImage","save","result","deletePost","findByIdAndRemove","findById","pull","filePath","join","__dirname","unlink","searchPost","term","toLowerCase","like"],"mappings":"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","sourcesContent":["const fs = require(\"fs\");\nconst path = require(\"path\");\nconst { validationResult } = require(\"express-validator\");\nconst Op = models.Sequelize.Op;\n\nimport models from \"../setup/models\";\n// const User = require(\"../models/user\");\n// const Image = require(\"../models/image\");\n// const Comment = require(\"../models/postComment\");\n// const Avatar = require(\"../models/avatar\");\n// const PostRate = require(\"../models/postRate\");\nconst rewardPost = 20;\nconst rewardComment = 1;\n\nmodule.exports = {\n  /*\n   * Get posts by user\n   */\n  getPosts: async (req, res, next) => {\n    //currentPage is one only if undefined \"null not included\"\n    let { currentPage = 1, pageSize = 4 } = req.query;\n\n    // Make sure these are numbers\n    currentPage = parseInt(currentPage);\n    currentPage == 1 ? (currentPage = 0) : (currentPage = currentPage - 1);\n    pageSize = parseInt(pageSize);\n\n    //offset = currentPage(7) * pageSize(25) = 175\n    //limit = pageSize(25)\n    const offset = currentPage * pageSize;\n    const limit = pageSize;\n\n    try {\n      const { count, rows: posts } = await models.Post.findAndCountAll({\n        limit,\n        offset,\n        // todo order\n        //order: [[\"createdAt\", \"ASC\"]],\n        where: {\n          userId: req.user.id\n        },\n        include: [\n          {\n            model: models.Image,\n            attributes: [\"imageRef\"]\n          },\n          {\n            model: models.User,\n            attributes: [\"username\"],\n            include: [\n              {\n                model: models.Avatar,\n                attributes: [\"imageRef\"]\n              }\n            ]\n          }\n        ],\n        order: [[\"title\", \"ASC\"]]\n      });\n      if (posts.length > 0) {\n        return res.status(200).json({\n          message: \"Posts found!\",\n          posts: posts,\n          currentPage: currentPage + 1,\n          count: count / pageSize\n        });\n      } else {\n        return res.status(200).json({\n          message: \"No posts found!\"\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  },\n\n  /*\n   * Create a new comment for exesting post\n   */\n  addComment: (req, res, next) => {\n    const errors = validationResult(req);\n    const postId = req.params.postId;\n    if (!errors.isEmpty()) {\n      const error = new Error(\"Validation failed, entered data is incorrect.\");\n      error.statusCode = 422;\n      throw error;\n    }\n    models.User.findByPk(req.user.id, {\n      include: [\n        {\n          model: models.Avatar,\n          attributes: [\"imageRef\"]\n        }\n      ]\n    })\n      .then(user => {\n        if (user.Avatars) {\n          user.update({ credit: user.credit + rewardComment });\n          return models.PostComment.create({\n            text: req.body.text,\n            imageRef: user.Avatars.imageRef,\n            userId: req.user.id,\n            postId: postId\n          });\n        } else {\n          return models.PostComment.create({\n            text: req.body.text,\n            imageRef: \"\",\n            userId: req.user.id,\n            postId: postId\n          });\n        }\n      })\n      .then(comment => {\n        return models.PostComment.findByPk(comment.id, {\n          include: [\n            {\n              model: models.User,\n              attributes: [\"username\"]\n            }\n          ]\n        }).then(comment => {\n          res.status(201).json({\n            message: \"Comment created successfully!\",\n            comment: comment\n          });\n        });\n      })\n      .catch(err => {\n        if (!err.statusCode) {\n          err.statusCode = 500;\n        }\n        next(err);\n      });\n  },\n\n  /*\n   * Add rating to exesting post\n   */\n  addRate: async (req, res, next) => {\n    const errors = await validationResult(req);\n    const postId = req.params.postId;\n    const rate = req.params.postRate;\n    if (!errors.isEmpty()) {\n      const error = new Error(\"Validation failed, entered data is incorrect.\");\n      error.statusCode = 422;\n      throw error;\n    }\n    // postId = Post.findByPk(postId).then(post => {\n    //   return post.id;\n    // });\n    models.PostRate.findOne({\n      where: {\n        postId: postId,\n        userId: req.user.id\n      }\n    })\n      .then(postRate => {\n        if (postRate) {\n          postRate.update({\n            rate: rate\n          });\n        } else {\n          models.PostRate.create({\n            postId: postId,\n            userId: req.user.id,\n            rate: rate\n          });\n        }\n      })\n      .then(res => {\n        //Add award to user after rating\n        req.user.update({ credit: req.user.credit + rewardComment });\n        return models.Post.findByPk(postId);\n      })\n      .then(post => {\n        res.status(201).json({\n          message: \"Rate added successfully!\",\n          rate: post.starCount\n        });\n      })\n      .catch(err => {\n        if (!err.statusCode) {\n          err.statusCode = 500;\n        }\n        next(err);\n      });\n  },\n\n  /*\n   * Create new post\n   */\n  createPost: async (req, res, next) => {\n    const location = JSON.parse(req.body.location);\n    const addressArray = location.address.split(\",\");\n    const address = await models.Address.create({\n      street: addressArray[0],\n      city: addressArray[1],\n      country: addressArray[2],\n      lat: location.coordinates.lat,\n      lang: location.coordinates.lng,\n      postcode: 0\n    });\n\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      const error = new Error(\"Validation failed, entered data is incorrect.\");\n      error.statusCode = 422;\n      throw error;\n    }\n    if (!req.files[0] || !req.user) {\n      const error = new Error(\"No image provided or user not registred\");\n      error.statusCode = 422;\n      throw error;\n    }\n    const title = req.body.title;\n    const content = req.body.content;\n    let credit = 0;\n    return models.User.findByPk(req.user.id)\n      .then(user => {\n        if (!user) {\n          const error = new Error(\"User not found.\");\n          error.statusCode = 404;\n          throw error;\n        }\n        ///Add reward to user after posting\n        credit = user.credit + rewardPost;\n        user.update({ credit: user.credit + rewardPost });\n        return models.Post.create({\n          title: title,\n          content: content,\n          category: req.body.category,\n          userId: user.id,\n          author: user.username,\n          imageUrl: req.files[0].path\n        })\n          .then(post => {\n            /**\n             *\n             */\n            post.setAddress(address);\n            \n            req.files.map(file => {\n              models.Image.create({\n                imageRef: file.path\n              }).then(image => {\n                image.setPost(post);\n              });\n            });\n            return post;\n            // ,\n            // Post.update({\n            //   imageUrl: req.files[0].path\n            // }, {\n            //   where: {\n            //     id: post.id\n            //   }\n            // })\n          })\n          .then(post => {\n            res.status(201).json({\n              message: \"Post created successfully!\",\n              post: post,\n              userId: req.user.id,\n              credit: credit\n            });\n          });\n      })\n      .catch(err => {\n        if (!err.statusCode) {\n          err.statusCode = 500;\n        }\n        next(err);\n      });\n  },\n  /*\n   * Get one post by id\n   */\n  getPost: (req, res, next) => {\n    models.Post.findByPk(req.params.postId, {\n      include: [\n        {\n          model: models.Image,\n          attributes: [\"imageRef\"]\n        },\n        {\n          model: models.Address,\n          attributes: [\"city\", \"country\", \"lang\", \"lat\"]\n        },\n        {\n          model: models.User,\n          attributes: [\"username\"],\n          include: [\n            {\n              model: models.Avatar,\n              attributes: [\"imageRef\"]\n            }\n          ]\n        },\n        {\n          model: models.PostComment,\n          include: [\n            {\n              model: models.User,\n              attributes: [\"username\"]\n            }\n          ]\n        }\n      ]\n    })\n      .then(post => {\n        if (!post) {\n          const error = new Error(\"Could not find post.\");\n          error.statusCode = 404;\n          throw error;\n        }\n        res.status(200).json({\n          message: \"Post fetched.\",\n          post: post\n        });\n      })\n      .catch(err => {\n        if (!err.statusCode) {\n          err.statusCode = 500;\n        }\n        next(err);\n      });\n  },\n  // todo fix get top for each category\n  /**\n   * Get Top noted feeds for home\n   */\n  getTopFeed: (req, res, next) => {\n    // var t5 = mydata.slice(0,5);\n    models.Post.findAll({\n      limit: 4,\n      include: [\n        {\n          model: models.Image,\n          attributes: [\"imageRef\"]\n        },\n        {\n          model: models.User,\n          attributes: [\"username\"],\n          include: [\n            {\n              model: models.Avatar,\n              attributes: [\"imageRef\"]\n            }\n          ]\n        }\n      ]\n    })\n      .then(posts => {\n        res.status(200).json({\n          message: \"Fetched top posts successfully.\",\n          posts: posts\n        });\n      })\n      .catch(err => {\n        if (!err.statusCode) {\n          err.statusCode = 500;\n        }\n        next(err);\n      });\n  },\n  //todo fix get top 4 of selected category\n  /**\n   * Get Top noted feeds by category\n   */\n  getTopSearchFeed: (req, res, next) => {\n    // var t5 = mydata.slice(0,5);\n    models.Post.findAll({\n      limit: 4,\n      include: [\n        {\n          model: models.Image,\n          attributes: [\"imageRef\"]\n        },\n        {\n          model: models.User,\n          attributes: [\"username\"],\n          include: [\n            {\n              model: models.Avatar,\n              attributes: [\"imageRef\"]\n            }\n          ]\n        }\n      ]\n    })\n      .then(posts => {\n        res.status(200).json({\n          message: \"Fetched top posts successfully.\",\n          posts: posts\n        });\n      })\n      .catch(err => {\n        if (!err.statusCode) {\n          err.statusCode = 500;\n        }\n        next(err);\n      });\n  },\n  /*\n   * update exesting post\n   */\n  updatePost: (req, res, next) => {\n    const postId = req.params.postId;\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      const error = new Error(\"Validation failed, entered data is incorrect.\");\n      error.statusCode = 422;\n      throw error;\n    }\n    const title = req.body.title;\n    const content = req.body.content;\n    let imageUrl = req.body.image;\n    if (req.file) {\n      imageUrl = req.file.path;\n    }\n    if (!imageUrl) {\n      const error = new Error(\"No file picked.\");\n      error.statusCode = 422;\n      throw error;\n    }\n    models.Post.findByPk(postId)\n      .then(post => {\n        if (!post) {\n          const error = new Error(\"Could not find post.\");\n          error.statusCode = 404;\n          throw error;\n        }\n        if (post.creator.toString() !== req.user.id) {\n          const error = new Error(\"Not authorized!\");\n          error.statusCode = 403;\n          throw error;\n        }\n        if (imageUrl !== post.imageUrl) {\n          clearImage(post.imageUrl);\n        }\n        post.title = title;\n        post.imageUrl = imageUrl;\n        post.content = content;\n        return post.save();\n      })\n      .then(result => {\n        res.status(200).json({\n          message: \"Post updated!\",\n          post: result\n        });\n      })\n      .catch(err => {\n        if (!err.statusCode) {\n          err.statusCode = 500;\n        }\n        next(err);\n      });\n  },\n  deletePost: (req, res, next) => {\n    const postId = req.params.postId;\n    models.Post.findByPk(postId)\n      .then(post => {\n        if (!post) {\n          const error = new Error(\"Could not find post.\");\n          error.statusCode = 404;\n          throw error;\n        }\n        if (post.creator.toString() !== req.user.id) {\n          const error = new Error(\"Not authorized!\");\n          error.statusCode = 403;\n          throw error;\n        }\n        // Check logged in user\n        clearImage(post.imageUrl);\n        return Post.findByIdAndRemove(postId);\n      })\n      .then(result => {\n        return User.findById(req.user.id);\n      })\n      .then(user => {\n        user.posts.pull(postId);\n        return user.save();\n      })\n      .then(result => {\n        res.status(200).json({\n          message: \"Deleted post.\"\n        });\n      })\n      .catch(err => {\n        if (!err.statusCode) {\n          err.statusCode = 500;\n        }\n        next(err);\n      });\n  },\n\n  clearImage: filePath => {\n    filePath = path.join(__dirname, \"..\", filePath);\n    fs.unlink(filePath, err => console.log(err));\n  },\n\n  /**\n   * Search for post\n   */\n  searchPost: async (req, res) => {\n    //currentPage is one only if undefined \"null not included\"\n    let { term, category, city, currentPage = 1, pageSize = 2 } = req.query;\n\n    // Make sure these are numbers\n    currentPage = parseInt(currentPage);\n    currentPage == 1 ? (currentPage = 0) : (currentPage = currentPage - 1);\n    pageSize = parseInt(pageSize);\n    // Make lowercase\n    term ? (term = term.toLowerCase()) : \"\";\n    //offset = currentPage(7) * pageSize(25) = 175\n    //limit = pageSize(25)\n    const offset = currentPage * pageSize;\n    const limit = pageSize;\n\n    try {\n      const { count, rows: posts } = await models.Post.findAndCountAll({\n        limit,\n        offset,\n        // todo order\n        //order: [[\"createdAt\", \"ASC\"]],\n        where: {\n          title: { [Op.like]: \"%\" + term + \"%\" },\n          category: { [Op.like]: \"%\" + category + \"%\" }\n        },\n        include: [\n          {\n            model: models.Address,\n            where: {\n              city: { [Op.like]: \"%\" + city + \"%\" }\n            }\n          },\n          {\n            model: models.Image,\n            attributes: [\"imageRef\"]\n          },\n          {\n            model: models.User,\n            attributes: [\"username\"],\n            include: [\n              {\n                model: models.Avatar,\n                attributes: [\"imageRef\"]\n              }\n            ]\n          }\n        ],\n        order: [[\"title\", \"ASC\"]]\n      });\n      if (posts.length > 0) {\n        return res.status(200).json({\n          message: \"Posts found!\",\n          post: posts,\n          currentPage: currentPage + 1,\n          count: count / 2\n        });\n      } else {\n        return res.status(200).json({\n          message: \"Sorry change search term!\"\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n// module.exports = {\n//     method: function() {},\n//     otherMethod: function() {}\n// }\n"],"file":"feed.js"}