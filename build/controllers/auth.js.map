{"version":3,"sources":["../../src/controllers/auth.js"],"names":["require","validationResult","bcrypt","jwt","exports","signup","req","res","next","ROLETYPE","email","body","username","password","hash","then","hashedPw","User","models","save","Role","findOne","where","type","role","setRole","user","status","json","message","userId","_id","err","statusCode","login","loadedUser","findAll","include","model","attributes","error","Error","compare","isEqual","token","sign","id","toString","credit","serverConfig","secret","expiresIn","getUserStatus","findByPk","updateUserStatus","newStatus","result"],"mappings":"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","sourcesContent":["const { validationResult } = require(\"express-validator\");\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nimport models from \"../setup/models\";\nimport serverConfig from \"../config/server.json\";\n\nexports.signup = (req, res, next) => {\n  // const errors = validationResult(req);\n  // if (!errors.isEmpty()) {\n  //   const error = new Error('Validation failed.');\n  //   error.statusCode = 422;\n  //   error.data = errors.array();\n  //   throw error;\n  // }\n\n  /**\n   * By default user hase 'user' type\n   */\n  const ROLETYPE = \"User\";\n  const email = req.body.email;\n  const username = req.body.username;\n  const password = req.body.password;\n  bcrypt\n    .hash(password, 12)\n    .then(hashedPw => {\n      const User = new models.User({\n        email: email,\n        password: hashedPw,\n        username: username\n      });\n      return User.save();\n    })\n    .then(User => {\n      models.Role.findOne({\n        where: {\n          type: ROLETYPE\n        }\n      }).then(role => {\n        return User.setRole(role);\n      });\n      return User;\n    })\n    .then(user =>\n      res.status(201).json({\n        message: \"User created!\",\n        userId: user._id\n      })\n    )\n    .catch(err => {\n      if (!err.statusCode) {\n        err.statusCode = 500;\n      }\n      next(err);\n    });\n};\n\nexports.login = (req, res, next) => {\n  const email = req.body.email;\n  const password = req.body.password;\n  let loadedUser;\n  models.User.findAll({\n    where: {\n      email: email\n    },\n    include: [\n      {\n        model: models.Role,\n        attributes: [\"type\"]\n      }\n    ]\n  })\n    .then(user => {\n      if (!user[0]) {\n        const error = new Error(\"A user with this email could not be found.\");\n        error.statusCode = 401;\n        throw error;\n      }\n      loadedUser = user[0];\n      return bcrypt.compare(password, user[0].password);\n    })\n    .then(isEqual => {\n      if (!isEqual) {\n        const error = new Error(\"Wrong password!\");\n        error.statusCode = 401;\n        throw error;\n      }\n      const token = jwt.sign(\n        {\n          email: loadedUser.email,\n          userId: loadedUser.id.toString(),\n          type: loadedUser.role.type,\n          credit: loadedUser.credit,\n        },\n        serverConfig.secret,\n        {\n          expiresIn: \"240h\"\n        }\n      );\n      res.status(200).json({\n        token: token,\n        userId: loadedUser.id.toString(),\n        type: loadedUser.role.type,\n        credit: loadedUser.credit,\n      });\n    })\n    .catch(err => {\n      if (!err.statusCode) {\n        err.statusCode = 500;\n      }\n      //to de prevent forward error to user\n      next(err);\n    });\n};\n\nexports.getUserStatus = (req, res, next) => {\n  models.User.findByPk(req.userId)\n    .then(user => {\n      if (!user) {\n        const error = new Error(\"User not found.\");\n        error.statusCode = 404;\n        throw error;\n      }\n      res.status(200).json({\n        status: user.status\n      });\n    })\n    .catch(err => {\n      if (!err.statusCode) {\n        err.statusCode = 500;\n      }\n      next(err);\n    });\n};\n\nexports.updateUserStatus = (req, res, next) => {\n  const newStatus = req.body.status;\n  models.User.findByPk(req.userId)\n    .then(user => {\n      if (!user) {\n        const error = new Error(\"User not found.\");\n        error.statusCode = 404;\n        throw error;\n      }\n      user.status = newStatus;\n      return user.save();\n    })\n    .then(result => {\n      res.status(200).json({\n        message: \"User updated.\"\n      });\n    })\n    .catch(err => {\n      if (!err.statusCode) {\n        err.statusCode = 500;\n      }\n      next(err);\n    });\n};\n"],"file":"auth.js"}