{"version":3,"sources":["../../src/middleware/is-admin.js"],"names":["jwt","require","module","exports","req","res","next","authHeader","get","error","Error","statusCode","token","split","decodedToken","verify","serverConfig","secret","type","userId","models","User","findByPk","include","model","Role","attributes","user","role"],"mappings":";;;;;;;;AACA;;AACA;;AAFA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAIAC,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAiB,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,YAAAA,UAFO,GAEMH,GAAG,CAACI,GAAJ,CAAQ,eAAR,CAFN;;AAAA,gBAGRD,UAHQ;AAAA;AAAA;AAAA;;AAILE,YAAAA,KAJK,GAIG,IAAIC,KAAJ,CAAU,oBAAV,CAJH;AAKXD,YAAAA,KAAK,CAACE,UAAN,GAAmB,GAAnB;AALW,kBAMLF,KANK;;AAAA;AAQPG,YAAAA,KARO,GAQCL,UAAU,CAACM,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CARD,EASb;;AACIC,YAAAA,YAVS,GAUMd,GAAG,CAACe,MAAJ,CAAWH,KAAX,EAAkBI,mBAAaC,MAA/B,CAVN;;AAAA,gBAWRH,YAXQ;AAAA;AAAA;AAAA;;AAYLL,YAAAA,MAZK,GAYG,IAAIC,KAAJ,CAAU,oBAAV,CAZH;AAaXD,YAAAA,MAAK,CAACE,UAAN,GAAmB,GAAnB;AAbW,kBAcLF,MAdK;;AAAA;AAAA,kBAeF,CAACK,YAAY,CAACI,IAAd,KAAuB,OAfrB;AAAA;AAAA;AAAA;;AAgBLT,YAAAA,OAhBK,GAgBG,IAAIC,KAAJ,CAAU,YAAV,CAhBH;AAiBXD,YAAAA,OAAK,CAACE,UAAN,GAAmB,GAAnB;AAjBW,kBAkBLF,OAlBK;;AAAA;AAoBbL,YAAAA,GAAG,CAACe,MAAJ,GAAaL,YAAY,CAACK,MAA1B;AApBa;AAAA,mBAqBMC,mBAAOC,IAAP,CAAYC,QAAZ,CAAqBlB,GAAG,CAACe,MAAzB,EAAiC;AAClDI,cAAAA,OAAO,EAAE,CACP;AACEC,gBAAAA,KAAK,EAAEJ,mBAAOK,IADhB;AAEEC,gBAAAA,UAAU,EAAE,CAAC,MAAD;AAFd,eADO;AADyC,aAAjC,CArBN;;AAAA;AAqBPC,YAAAA,IArBO;;AAAA,kBA6BT,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,IAAf,IAAuBD,IAAI,CAACC,IAAL,CAAUV,IAAV,IAAkB,OA7BhC;AAAA;AAAA;AAAA;;AA8BLT,YAAAA,OA9BK,GA8BG,IAAIC,KAAJ,CAAU,0BAAV,CA9BH;AA+BXD,YAAAA,OAAK,CAACE,UAAN,GAAmB,GAAnB;AA/BW,kBAgCLF,OAhCK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAsCNH,IAAI,aAtCE;;AAAA;AAyCfA,YAAAA,IAAI;;AAzCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const jwt = require(\"jsonwebtoken\");\nimport models from \"../setup/models\";\nimport serverConfig from \"../config/server.json\";\n\nmodule.exports = async (req, res, next) => {\n  try {\n    const authHeader = req.get(\"Authorization\");\n    if (!authHeader) {\n      const error = new Error(\"Not authenticated.\");\n      error.statusCode = 401;\n      throw error;\n    }\n    const token = authHeader.split(\" \")[1];\n    // decodedToken;\n    let decodedToken = jwt.verify(token, serverConfig.secret);\n    if (!decodedToken) {\n      const error = new Error(\"Not authenticated.\");\n      error.statusCode = 401;\n      throw error;\n    } else if (!decodedToken.type === \"Admin\") {\n      const error = new Error(\"Not admin.\");\n      error.statusCode = 401;\n      throw error;\n    }\n    req.userId = decodedToken.userId;\n    const user = await models.User.findByPk(req.userId, {\n      include: [\n        {\n          model: models.Role,\n          attributes: [\"type\"]\n        }\n      ]\n    });\n    if (!user || !user.role || user.role.type != \"Admin\") {\n      const error = new Error(\"Invalid request! No way!\");\n      error.statusCode = 401;\n      throw error;\n    }\n  } catch (err) {\n    // todo log error\n\n    // This will be caught by error handler\n    return next(err);\n  }\n\n  next();\n};\n"],"file":"is-admin.js"}