{"version":3,"sources":["../../src/middleware/authentication.js"],"names":["module","exports","req","res","next","authToken","headers","authorization","error","Error","token","split","userTok","jwt","verify","serverConfig","secret","userId","models","User","findByPk","include","model","Role","attributes","user","console","log","message","warn"],"mappings":";;;;;;;;AACA;;AACA;;AACA;;AAHA;AAKA;AACAA,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAiB,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,SADW,GACCH,GAAG,CAACI,OAAJ,CAAYC,aADb;;AAAA,kBAEXF,SAAS,IAAIA,SAAS,KAAK,IAFhB;AAAA;AAAA;AAAA;;AAAA;;AAAA,gBAINA,SAJM;AAAA;AAAA;AAAA;;AAKHG,YAAAA,KALG,GAKK,IAAIC,KAAJ,CAAU,YAAV,CALL;AAAA,kBAMHD,KANG;;AAAA;AAQLE,YAAAA,KARK,GAQGL,SAAS,CAACM,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CARH;AASXT,YAAAA,GAAG,CAACU,OAAJ,GAAcC,yBAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,mBAAaC,MAA/B,CAAd;AAEAd,YAAAA,GAAG,CAACe,MAAJ,GAAaf,GAAG,CAACU,OAAJ,CAAYK,MAAzB;AAXW;AAAA,mBAYMC,mBAAOC,IAAP,CAAYC,QAAZ,CAAqBlB,GAAG,CAACe,MAAzB,EAAiC;AAChDI,cAAAA,OAAO,EAAE,CACP;AACEC,gBAAAA,KAAK,EAAEJ,mBAAOK,IADhB;AAEEC,gBAAAA,UAAU,EAAE,CAAC,MAAD;AAFd,eADO;AADuC,aAAjC,CAZN;;AAAA;AAYXtB,YAAAA,GAAG,CAACuB,IAZO;;AAAA,gBAoBNvB,GAAG,CAACuB,IApBE;AAAA;AAAA;AAAA;;AAqBHjB,YAAAA,MArBG,GAqBK,IAAIC,KAAJ,CAAU,iBAAV,CArBL;AAAA,kBAsBHD,MAtBG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBX;AACAkB,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAEC,OAAd,EA1BW,CA2BX;AACA;;AA5BW,6CA6BJxB,IAAI,aA7BA;;AAAA;AAAA;AAAA;;AAAA;AAgCbF,YAAAA,GAAG,CAACuB,IAAJ,GAAW,EAAX;AACAC,YAAAA,OAAO,CAACG,IAAR,CAAa,oBAAb;AACMrB,YAAAA,OAlCO,GAkCC,IAAIC,KAAJ,CAAU,oBAAV,CAlCD,EAmCb;AACA;;AApCa,6CAqCNL,IAAI,CAACI,OAAD,CArCE;;AAAA;AAuCfJ,YAAAA,IAAI;;AAvCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// Imports\nimport jwt from \"jsonwebtoken\";\nimport serverConfig from \"../config/server.json\";\nimport models from \"../setup/models\";\n\n// Authentication middleware\nmodule.exports = async (req, res, next) => {\n  let authToken = req.headers.authorization;\n  if (authToken && authToken !== null) {\n    try {\n      if (!authToken) {\n        const error = new Error(\"No token!!\");\n        throw error;\n      }\n      const token = authToken.split(\" \")[1];\n      req.userTok = jwt.verify(token, serverConfig.secret);\n      \n      req.userId = req.userTok.userId;\n      req.user = await models.User.findByPk(req.userId, {\n        include: [\n          {\n            model: models.Role,\n            attributes: [\"type\"]\n          }\n        ]\n      });\n      if (!req.user) {\n        const error = new Error(\"No user found!!\");\n        throw error;\n      }\n    } catch (e) {\n      //todo logs\n      console.log(e.message);\n      // error.statusCode = 401;\n      // throw error;\n      return next(e);\n    }\n  } else {\n    req.user = {};\n    console.warn(\"No token detected.\");\n    const error = new Error(\"Not authenticated.\");\n    // error.statusCode = 401;\n    // throw error;\n    return next(error);\n  }\n  next();\n};\n"],"file":"authentication.js"}