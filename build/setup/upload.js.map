{"version":3,"sources":["../../src/setup/upload.js"],"names":["multer","require","uuidv4","server","console","info","storage","diskStorage","destination","path","join","filename","request","file","callback","fieldname","Date","now","extname","originalname","upload","array","post","serverConfig","endpoint","response","error","fileNames","files","push","status","json","success","fileFilter","req","cb","mimetype","fileStorage","use","limits","fileSize"],"mappings":"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","sourcesContent":["// Imports\nimport path from \"path\";\n// import multer from \"multer\";\nvar multer = require(\"multer\");\nconst uuidv4 = require(\"uuid/v4\");\nimport authentication from \"../middleware/authentication\";\n// App Imports\nimport serverConfig from \"../config/server.json\";\n\n// File upload configurations and route\nexport default function(server) {\n  console.info(\"SETUP - Upload...\");\n\n  // Set destination\n  const storage = multer.diskStorage({\n    destination: path.join(\n      // __dirname,\n      // \"..\",\n      // \"..\",\n      \"public\",\n      \"images\",\n      \"uploads\"\n    ),\n    filename: function(request, file, callback) {\n      callback(\n        null,\n        file.fieldname + \"-\" + Date.now() + path.extname(file.originalname)\n      );\n    }\n  });\n\n  const upload = multer({\n    storage: storage\n  }).array(\"file\");\n\n  // Upload route\n  server.post(serverConfig.upload.endpoint, (request, response) => {\n    upload(request, response, function(error) {\n      if (!error) {\n        let fileNames = [];\n        for (let filename in request.files) {\n          fileNames.push(request.files[filename].filename);\n        }\n        return response.status(201).json({\n          success: true,\n          file: fileNames\n        });\n      } else {\n        return response.json({\n          success: false,\n          file: null\n        });\n      }\n    });\n  });\n\n  //todo if you want to intercept all connection \n  //server.use(authentication);\n\n  //filter file type\n  const fileFilter = (req, file, cb) => {\n    if (\n      file.mimetype === \"image/png\" ||\n      file.mimetype === \"image/jpg\" ||\n      file.mimetype === \"image/icon\" ||\n      file.mimetype === \"image/vnd.microsoft.icon\" ||\n      file.mimetype === \"image/jpeg\"\n    ) {\n      cb(null, true);\n    } else {\n      cb(null, false);\n    }\n  };\n\n  //todo none used code\n  const fileStorage = multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, \"file\");\n    },\n    filename: (req, file, cb) => {\n      cb(null, uuidv4());\n    }\n  });\n\n  // limit file size\n  server.use(\n    multer({\n      storage: storage,\n      fileFilter: fileFilter,\n      limits: {\n        fileSize: 1000 * 1000 * 2\n      }\n    }).array(\"image\")\n  );\n}\n"],"file":"upload.js"}