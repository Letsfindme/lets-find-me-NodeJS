{"version":3,"sources":["../../src/setup/load-modules.js"],"names":["feedRoutes","require","authRoutes","userRoute","shopRoute","adminRoute","isAdmin","server","console","info","use","bodyParser","json","urlencoded","extended","express","path","join","__dirname","error","req","res","next","status","statusCode","message","data"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAYA;;AAlBA;AAOA,IAAMA,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAMI,UAAU,GAAGJ,OAAO,CAAC,iBAAD,CAA1B;;AACA,IAAMK,OAAO,GAAGL,OAAO,CAAC,wBAAD,CAAvB,C,CACA;AACA;AACA;AAEA;;;AAGA;AACe,kBAASM,MAAT,EAAiB;AAC9BC,EAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb,EAD8B,CAG9B;;AACAF,EAAAA,MAAM,CAACG,GAAP,CAAW,uBAAX,EAJ8B,CAM9B;;AACAH,EAAAA,MAAM,CAACG,GAAP,CAAWC,uBAAWC,IAAX,EAAX;AACAL,EAAAA,MAAM,CAACG,GAAP,CAAWC,uBAAWE,UAAX,CAAsB;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAtB,CAAX,EAR8B,CAU9B;;AACAP,EAAAA,MAAM,CAACG,GAAP,CAAW,+BAAX,EAX8B,CAa9B;;AACAH,EAAAA,MAAM,CAACG,GAAP,CACE,SADF,EAEEK,8BAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,SAAjC,CAAf,CAFF,EAd8B,CAkB9B;AAEA;AACA;AACA;AACA;;AACAX,EAAAA,MAAM,CAACG,GAAP,CAAW,wBAAO,KAAP,CAAX,EAxB8B,CAyB9B;;AACAH,EAAAA,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBV,UAApB;AACAO,EAAAA,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBR,UAApB;AACAK,EAAAA,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBP,SAApB;AACAI,EAAAA,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBN,SAApB;AACAG,EAAAA,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqBJ,OAArB,EAA8BD,UAA9B,EA9B8B,CAgC9B;;AACAE,EAAAA,MAAM,CAACG,GAAP,CAAW,UAACS,KAAD,EAAQC,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAA2B;AACpC;AACA;AACA,QAAMC,MAAM,GAAGJ,KAAK,CAACK,UAAN,IAAoB,GAAnC;AACA,QAAMC,OAAO,GAAGN,KAAK,CAACM,OAAtB;AACA,QAAMC,IAAI,GAAGP,KAAK,CAACO,IAAnB;AACAL,IAAAA,GAAG,CAACE,MAAJ,CAAWA,MAAX,EAAmBX,IAAnB,CAAwB;AACtBa,MAAAA,OAAO,EAAEA,OADa;AAEtBC,MAAAA,IAAI,EAAEA;AAFgB,KAAxB;AAID,GAVD;AAWD","sourcesContent":["// Imports\nimport express from \"express\";\nimport path from \"path\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\nimport cookieParser from \"cookie-parser\";\nimport morgan from \"morgan\";\nconst feedRoutes = require(\"../routes/feed\");\nconst authRoutes = require(\"../routes/auth\");\nconst userRoute = require(\"../routes/user\");\nconst shopRoute = require(\"../routes/shop\");\nconst adminRoute = require(\"../routes/admin\");\nconst isAdmin = require(\"../middleware/is-admin\");\n// import feedRoutes from\"../routes/feed\";\n// import authRoutes from\"../routes/auth\";\n// import userRoute from\"./routes/user\";\n\n// App Imports\nimport { NODE_ENV } from \"../config/env\";\n\n// Load express modules\nexport default function(server) {\n  console.info(\"SETUP - Loading modules...\");\n\n  // Enable CORS\n  server.use(cors());\n\n  // Request body parser\n  server.use(bodyParser.json());\n  server.use(bodyParser.urlencoded({ extended: false }));\n\n  // Request body cookie parser\n  server.use(cookieParser());\n\n  // Static files folder\n  server.use(\n    \"/public\",\n    express.static(path.join(__dirname, \"..\", \"..\", \"/public\"))\n  );\n  // server.use(\"/images\", express.static(path.join(__dirname, \"images\")));\n\n  // HTTP logger\n  // if (NODE_ENV === \"development\") {\n  //   server.use(morgan(\"tiny\"));\n  // }\n  server.use(morgan(\"dev\"))\n  // Load routers\n  server.use(\"/feed\", feedRoutes);\n  server.use(\"/auth\", authRoutes);\n  server.use(\"/user\", userRoute);\n  server.use(\"/shop\", shopRoute);\n  server.use(\"/admin\", isAdmin, adminRoute);\n\n  // error handler\n  server.use((error, req, res, next) => {\n    // todo log error properly\n    //console.log(error);\n    const status = error.statusCode || 500;\n    const message = error.message;\n    const data = error.data;\n    res.status(status).json({\n      message: message,\n      data: data\n    });\n  });\n}\n"],"file":"load-modules.js"}